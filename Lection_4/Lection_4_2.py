"""
Лекция 4.2.
Функциональные методы программирования.
Функции высших порядков: map/filter/reduce/sort.
Анонимные функции (lambda)/ Замыкания
"""
from functools import reduce

# лямбда-функции для обработки списков

eng_rus_dict = {
    "cat": "кот",
    "car": "машина"
}

lst2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

def a(x):
    return x * 2

b = lambda x : x * 2  # ключевое слово lambda, указ аргумент : что делает функция с аргументом, аналогично a(x)

print(a(2), b(2))

# лямбда-функции удобнее успользовать при обработке списков
# рассмотрим функцию map, кот первым арг приним некот функцию, а вторым - список или то, по чему можно итерироваться (проходить цикл)
lst4 = map(a, lst2)
print(lst4)
print(range(10))
# эти ункции ленивые, их результат вызывается только если он необходим
# вызвать резельтам можно с помощью цикла или с помощью list(), преобразовав их в список
print(list(lst4))
print(list(range(10)))

lst5 = filter(lambda x: x < 4, lst2)
# print(list(lst5)) между функциями нельзя делать вывод, так как иначе все испортится
lst5 = map(lambda x: x * 2, lst5)
print(list(lst5))

# аналогично
lst2_2 = [i * 2 for i in lst2 if i < 4]

print(sorted([3, 5, 2, 1])) # сортировка по возрастанию
print(list(reversed(sorted([3, 5, 2, 1]))))  # сортировка по убыванию

test_dir = {"a": 5, "b": 3, "d": 8, "c": -1}
print(test_dir)
# первый аргумент - список пар, второй - по какому элементу пары будет происходить сортировка
print(sorted(test_dir.items(), key=lambda x: x[0])) # сортировка словаря по ключам
print(dict(sorted(test_dir.items(), key=lambda x: x[0])))
print(dict(sorted(test_dir.items(), key=lambda x: x[1]))) # сортировка словаря по значениям

# reduce() позволяет из списков извлекать агругирующие значения (sum, max, min, ..)
# первый аргумент - лямбда-функция, кот приним 2 аргумента: предыд знач, кот накопилось за выполнение предыд операций, второй - текущее значение
# второй аргумент - список
print(reduce(lambda x, y: x + y, lst2))
# на выходе получаем сумму всех элементов списка


"""
enumerate(sequence, start=0)
Параметры:
sequence - любая последовательность, итератор, или объект, поддерживающий метод итератора __next__(),
start - число int, начальное значение счётчика.
Возвращаемое значение:
tuple - кортеж, содержащий пары ('счётчик', 'элемент') для элементов указанной последовательности.
Описание:
Функция enumerate() вернет кортеж, содержащий отсчет от start и значение, полученное из итерации по объекту. Переданный в функцию объект должен быть последовательностью, итератором или другим объектом, который поддерживает метод итератора __next__().

Функция enumerate() применяется в случаях, когда необходим счётчик количества элементов в последовательности. Позволяет избавиться от необходимости инициировать и обновлять отдельную переменную-счётчик.

Функцию enumerate() можно записать так:
def enumerate(sequence, start=0):
    n = start
    for elem in sequence:
        yield n, elem
        n += 1
"""