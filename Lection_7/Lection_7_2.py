"""
Лекция 7.2.
Пакетный менеджер pip, установка зависимостей.
Файл requirements.txt. Модуль requests.
Выполнение HTTP запросов
"""

# модуль requests
# перед началом работы входим в виртуальное окружение
# находим модуль request на сайте pypi.org/progects/
# выбираем первый результат requests 2.28.1
# этот модуль нужет, чтобы выполнять HTTP запросы к различным сайтам
# на этом сайте указывается команда для установки данного модуля, а так же небольшие примеры использования
# а так же есть ссылка на полную документацию, если нужно сделать более сложные вещи сэтой библиотекой

# устанавливаем модуль requests в виртуальное окружение
# pip install requests
# после этого скачивается сам модуль, а так же те модули, от кот он зависит

import requests
from pprint import pprint

response = requests.get('https://www.python.org/')  # запрашиваем информацию с сайта https://www.python.org
# он возвращает html код - код какой-то страницы в интернете
# кот может быть отображен браузером в красивом виде
print(response.status_code)  # выводим на экран status_code
# print(response.text)  # выводим текст, кот пришел в ответ на наш запрос
# мы выполняем запрос к сайту (get-запрос) и получаем ответ
# status_code = 200 показывает, что запрос успешно совершен и мы получили информацию с этого сайта
# скопируем текст с сайта https://python.org и проверим, что он содержится в том тексте, кот мы выводим
text = 'Python is a programming language that lets you work quickly'
print(text in response.text)


# post-запрос (сайт, данные кот мы передаем)
response2 = requests.post(
    "https://postman-echo.com/post",  # это специальный адресс, код просто выводит то, что мы послали ему
    data = {
            'a': 'test',
            'b': 2
    }
)
print(response2.status_code)
# print(response2.json())  # чтобы раскодировать json в типы python используем .json()
# выводим информацию, кот присылает сервер в ответ на этот запрос
# в ответе выведен словарь в одну строчку, воспользуемся функцией pprint из модуля pprint
# она красиво выводит словарь
pprint(response2.json())

# когда мы общаемся с каким-то другим сервисом, от которого мы ждем определенные данные,
# то будет приходить уже не html-код, а данные например в формате json
# json очень похож на словарь или список в котуказана необходимая информация
# мы увидим данные в этом формате, если откроем в браузере сайт https://postman-echo.com/get
# json превращается в словари и строчки в питоне, с кот мы в дальнейшем сможем рабоать

"""
так же в библиотеке requests можно:
передавать информацию об авторизации
r = requests.get('https://httpbin.org/basic-auth/user/pass', auth=('user', 'pass'))
вытаскивать различные заголовки из ответа, кодировку, текст
r.headers['content-type']
>>> r.headers['content-type']
'application/json; charset=utf8'
>>> r.encoding
'utf-8'
>>> r.text
'{"authenticated": true, ...'

все это описано в документации
она удовлетворяет почти все потребности, кот могут возникнуть при выполнении запросов по другим ресурсам
"""

# сделаем так, чтобы разработчики, кот в дальнейшем будут продолжать поддерживать наш проект смогли установить
# те же самые библиотеки, кот мы использовали здесь
# для этого создадим файл requirements.txt - список зависимостей
# и в этом файле описывается список библиотек с их версиями, чтобы в дальнейшем люди тоже смогли их установить


# сделаем так, чтобы разработчики, кот в дальнейшем будут продолжать поддерживать наш проект смогли установить
# те же самые библиотеки, кот мы использовали здесь
# для этого создадим файл requirements.txt - список зависимостей
# requests==2.28.1
# и в этом файле описывается список библиотек с их версиями, чтобы в дальнейшем другие люди тоже смогли их установить
# теперь мы можем попросить других разработчиков нашего провекта выполнить команду
# pip install -r requirements.txt
# после этого все модули, кот указаны в этом файле будут установлены в проект
# и файлы нашего проекта будут использовать все нужные им модули
# в .gitignore мы указали все файлы с расширением .txt
# чтобы вернуть наш файл в проект нужно написать обратное исключение:
# !requirements.txt
# и тогда этот файл станет виден репозиторию и его можно будет закоммитить

# pycharm ругается, что модули до сих пор не установлены, так как в этом файле мы не установили виртуальное окружение
# мы не указали среде разработки где находится виртуальное окружение и она думает, что у нас ничего еще не установлено
# чтобы установить виртуальное окружение:
# Python 3.9 -> Add New Interpriter -> Add Local Interpriter -> Existing -> env/Scripts/python.exe